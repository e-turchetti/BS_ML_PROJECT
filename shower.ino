/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/d5c49cbb-8812-4cb7-b3f8-abeaf8b58a58

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temp_desired;
  CloudTemperatureSensor temp_cold1;
  CloudTemperatureSensor temp_hot;
  CloudTemperatureSensor temp_measured;
  int cold_angle;
  int hot_angle;
  bool button;
  bool button2;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Servo.h>
#include <OneWire.h>
#include <DallasTemperature.h>

/*
  Dichiarazioni
*/
OneWire oneWire(2); // Imposta la connessione OneWire
DallasTemperature temp_sensors(&oneWire); // Dichiarazione dell'oggetto sensore
CloudTemperatureSensor temperatures[3];
CloudTemperatureSensor temp[3];
CloudTemperatureSensor another_temp[3];
// Creo gli oggetti servo
Servo myServoCold;
Servo myServoHot;

/*
  temp_desired e temp_measured sono rispettivamente temperature desiderata e misurata
  temp_cold e temp_hot sono le temperature dei serbatoi, di conseguenza la temp_desired deve necessariamente ricadere in questo intervallo.
*/

// Angoli limite a cui aprire le valvole
int low_limit_angle = 20; //A questo angolo ancora non esce acqua dai serbatoi;
int high_limit_angle = 34; //A questo angolo esce acqua a sufficienza
int default_angle = 30; //Angolo di default a cui aprire le valvole in determinati casi
float flow_coefficient; //numero compreso tra 0 e 1
float cold_distance;
float hot_distance;
float distance;
float distance_abs;
int hot_count = 0;
int cold_count = 0;
int n_sonde = 0;
int inc = 0;


void setup() {

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  //Debug config
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Inizializzo i sensori di temperatura
  temp_sensors.begin();

  myServoCold.attach(6);   // attaches the servo 1 on pin 11 to the servo object
  myServoHot.attach(10);   // attaches the servo 2 on pin 9 to the servo object

  //Imposto che i servo devono rimanere chiusi per evitare l'apertura iniziale delle valvole
  myServoCold.write(0);
  myServoHot.write(0);
}

void loop() {

  ArduinoCloud.update();
  get_temperatures();
  
  //Se il bottone2 Ã¨ acceso posso aprire le valvole all'angolo scelto da dashboard
  if (!button && button2) {
      myServoCold.write(cold_angle);
      myServoHot.write(hot_angle);
  }
  
  //Se il bottone Ã¨ acceso esegui il codice, altrimenti non fare nulla
  else if (button) {
    //Controllo che la temperatura desiderata non sia nÃ© troppo alta nÃ© troppo bassa, va bene il caso in cui Ã¨ uguale ai valori dei serbatoi
    if (temp_desired >= temp_cold1 && temp_desired <= temp_hot) {
      //Stampo i valori letti di temperatura
      Serial.print("Temperatura acqua FREDDA: ");
      Serial.println(temp_cold1);
      Serial.print("Temperatura acqua CALDA: ");
      Serial.println(temp_hot);
      Serial.print("Temperatura acqua DESIDERATA: ");
      Serial.println(temp_desired);
      Serial.print("Temperatura acqua MISURATA: ");
      Serial.println(temp_measured);

      if (cold_distance > hot_distance && (temp_hot - temp_measured) > 2 && hot_count == 0){ // la temperatura desiderata Ã¨ piÃ¹ vicina alla hot_temp
        hot_angle = high_limit_angle;
        cold_angle = 0;
        myServoCold.write(cold_angle);
        myServoHot.write(hot_angle);
        Serial.println("Portando il sensore a temperatura calda");
        delay(1000);
        get_temperatures();
        if((temp_hot - temp_measured) < 2){
          Serial.println("setto hot_count diverso da 0");
          hot_count++;
        }
      }
      else if (cold_distance <= hot_distance && (temp_measured - temp_cold1) > 2 && cold_count == 0){
        hot_angle = 0;
        cold_angle = high_limit_angle;
        myServoCold.write(cold_angle);
        myServoHot.write(hot_angle);
        Serial.println("Portando il sensore a temperatura fredda.");
        delay(1000);
        get_temperatures();
        if ((temp_measured - temp_cold1) < 2){
          Serial.println("setto cold_count diverso da 0");
          cold_count++;
        }
      }
      
      //distance = temp_desired - temp_measured -----> distance > 0 stiamo riscaldando, distance < 0 stiamo raffreddando 
      else {
        Serial.print("DISTANZA: ");
        Serial.println(distance);
        if (temp_measured >= (temp_desired - 0.5) && temp_measured <= (temp_desired + 0.5)) {
          Serial.println();
          Serial.println("RAGGIUNTA TEMPERATURA DESIDERATA");
          Serial.println();
        }
        else {
          if (cold_distance > hot_distance && distance <0 && hot_count != 0){
            Serial.println("All'inizio Ã¨ stata aperta l'acqua calda.");
            Serial.println("Vogliamo freddare");
            if (abs(distance) >= 5){
              if (cold_angle == 0) {
                cold_angle = 22;
              }
              cold_angle +=2;
              if (cold_angle > high_limit_angle){
                cold_angle = high_limit_angle;
              }
              myServoCold.write(cold_angle);
              Serial.println();
              Serial.print("Cold Angle:  ");
              Serial.println(cold_angle);
              Serial.print("Hot Angle:  ");
              Serial.println(hot_angle);
              Serial.println();
              ArduinoCloud.update();
              delay(6500);
            }
            else { 
              if (cold_angle == 0){
                cold_angle=23;
              }
              cold_angle += 1;
              if (cold_angle > high_limit_angle){
                cold_angle = high_limit_angle;
              }
              myServoCold.write(cold_angle);
              Serial.println();
              Serial.print("Cold Angle:  ");
              Serial.println(cold_angle);
              Serial.print("Hot Angle:  ");
              Serial.println(hot_angle);
              Serial.println();
              ArduinoCloud.update();
              delay(6500);
            }
          }
          else if (cold_distance > hot_distance && distance > 0 && hot_count != 0){
            Serial.println("All'inizio Ã¨ stata aperta l'acqua calda.");
            Serial.println("Vogliamo scaldare perchÃ¨ abbiamo freddato troppo");
              cold_angle -= 1;
              if (cold_angle < low_limit_angle){
                cold_angle = low_limit_angle;
              }
              myServoCold.write(cold_angle);
              Serial.println();
              Serial.print("Cold Angle:  ");
              Serial.println(cold_angle);
              Serial.print("Hot Angle:  ");
              Serial.println(hot_angle);
              Serial.println();
              ArduinoCloud.update();
              delay(8500);
            
          }
          else if (cold_distance <= hot_distance && distance > 0 && cold_count != 0){
            Serial.println("All'inizio Ã¨ stata aperta l'acqua fredda.");
            Serial.println("Vogliamo scaldare");
            if (abs(distance) >= 5){
              if (hot_angle == 0) {
                hot_angle = 22;
              }
              hot_angle +=2;
              if (hot_angle > high_limit_angle){
                hot_angle = high_limit_angle;
              }
              myServoHot.write(hot_angle);
              Serial.println();
              Serial.print("Cold Angle:  ");
              Serial.println(cold_angle);
              Serial.print("Hot Angle:  ");
              Serial.println(hot_angle);
              Serial.println();
              ArduinoCloud.update();
              delay(6500);
            }
            else {
              
              if (hot_angle == 0){
                hot_angle=23;
              }
              hot_angle += 1;
              if (hot_angle > high_limit_angle){
                hot_angle = high_limit_angle;
              }
              myServoHot.write(hot_angle);
              Serial.println();
              Serial.print("Cold Angle:  ");
              Serial.println(cold_angle);
              Serial.print("Hot Angle:  ");
              Serial.println(hot_angle);
              Serial.println();
              ArduinoCloud.update();
              delay(8500);
            }
          }
          else if (cold_distance < hot_distance && distance < 0 && cold_count != 0){
            Serial.println("All'inizio Ã¨ stata aperta l'acqua fredda.");
            Serial.println("Vogliamo raffreddare perchÃ¨ abbiamo scaldato troppo");
              hot_angle -= 1;
              if (hot_angle < low_limit_angle){
                hot_angle = low_limit_angle;
              }
              myServoHot.write(hot_angle);
              Serial.println();
              Serial.print("Cold Angle:  ");
              Serial.println(cold_angle);
              Serial.print("Hot Angle:  ");
              Serial.println(hot_angle);
              Serial.println();
              ArduinoCloud.update();
              delay(8500);
            
          }
        }
      }
    }
    else {
      cold_angle=0;
      hot_angle=0;
      myServoCold.write(cold_angle);
      myServoHot.write(hot_angle);
      Serial.println();
      Serial.print("Cold Angle:  ");
      Serial.println(cold_angle);
      Serial.print("Hot Angle:  ");
      Serial.println(hot_angle);
      Serial.println();
      Serial.println("LA TEMPERATURA DESIDERATA E' FUORI RANGE");
      delay(30);
    }
  }
  else if (!button && !button2) {
    Serial.println("ENTRAMBI I BOTTONI SONO SPENTI");
    cold_angle=0;
    hot_angle=0;
    myServoCold.write(cold_angle);
    myServoHot.write(hot_angle);
    Serial.print("Temperatura acqua FREDDA: ");
    Serial.println(temp_cold1);
    Serial.print("Temperatura acqua CALDA: ");
    Serial.println(temp_hot);
    Serial.print("Temperatura acqua MISURATA: ");
    Serial.println(temp_measured);
    delay(30);
  }
}

//Non esiste una funzione di map per i float, quindi va creata custom
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
  return round((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
}


/*
  Per ogni variabile READ_WRITE c'Ã¨ una relativa funzione che verrÃ  eseguita 
  ogni volta che un nuovo valore viene ricevuto da IoT Cloud.
*/
void onButtonChange()  {}
void onTempDesiredChange()  {}
void onButton2Change()  {}
void onColdAngleChange()  {
  //cold_angle=cold_angle;
}
void onHotAngleChange()  {
  //hot_angle=hot_angle;
}




/*
  Since TempCold1 is READ_WRITE variable, onTempCold1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempCold1Change()  {
  // Add your code here to act upon TempCold1 change
}

/*
  Since TempHot is READ_WRITE variable, onTempHotChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempHotChange()  {
  // Add your code here to act upon TempHot change
}

/*
  Since TempMeasured is READ_WRITE variable, onTempMeasuredChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempMeasuredChange()  {
  // Add your code here to act upon TempMeasured change
}
